{
	"info": {
		"_postman_id": "5079d3a1-c035-4714-8c9d-ad43c0a3dcb6",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44473727",
		"_collection_link": "https://juba-4080574.postman.co/workspace/Juba's-Workspace~ffada526-6aad-4d20-8873-b19ea055deaf/collection/44473727-5079d3a1-c035-4714-8c9d-ad43c0a3dcb6?action=share&source=collection_link&creator=44473727"
	},
	"item": [
		{
			"name": "Chapters",
			"item": [
				{
					"name": "Get a Chapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"If there are songs in the album, it must have an image\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.total_tracks > 0) {\r",
									"        pm.expect(jsonData.images.length).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"A compilation album must have available_markets\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.album_type === \"compilation\") {\r",
									"        pm.expect(jsonData.available_markets).to.be.an(\"array\").that.is.not.empty;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"release_date_format must be in the correct format\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.release_date_precision === \"year\") {\r",
									"        pm.expect(jsonData.release_date).to.match(/^\\d{4}/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"restrictions.reason must be a valid value\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.restrictions) {\r",
									"        pm.expect(jsonData.restrictions.reason).to.be.oneOf([\"market\", \"product\", \"explicit\"]);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/chapters?ids=0D5wENdkdwbqlrHoaJ9g29&market=ES",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"chapters"
							],
							"query": [
								{
									"key": "ids",
									"value": "0D5wENdkdwbqlrHoaJ9g29"
								},
								{
									"key": "market",
									"value": "ES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Several Chapters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"If there are songs in the album, it must have an image\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.total_tracks > 0) {\r",
									"        pm.expect(jsonData.images.length).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"A compilation album must have available_markets\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.album_type === \"compilation\") {\r",
									"        pm.expect(jsonData.available_markets).to.be.an(\"array\").that.is.not.empty;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"release_date_format must be in the correct format\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.release_date_precision === \"year\") {\r",
									"        pm.expect(jsonData.release_date).to.match(/^\\d{4}/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"restrictions.reason must be a valid value\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.restrictions) {\r",
									"        pm.expect(jsonData.restrictions.reason).to.be.oneOf([\"market\", \"product\", \"explicit\"]);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/chapters?ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29&market=ES",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"chapters"
							],
							"query": [
								{
									"key": "ids",
									"value": "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
								},
								{
									"key": "market",
									"value": "ES"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}