info:
  _postman_id: 9bedd05f-a6e6-44b5-a36e-11db98946c8d
  name: Reqres API Collection
  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
  _exporter_id: 44473727
  _collection_link: https://juba-4080574.postman.co/workspace/Juba's-Workspace~ffada526-6aad-4d20-8873-b19ea055deaf/collection/44473727-9bedd05f-a6e6-44b5-a36e-11db98946c8d?action=share&source=collection_link&creator=44473727
item:
  - name: List Users
    event:
      - listen: test
        script:
          exec:
            - >
              pm.test("Basic GET request should return status 200 and data", function () {
            - >2
                  pm.response.to.have.status(200); // Check if status is 200
            - >2
                  pm.response.to.have.jsonBody();  // Check if response body is in JSON format
            - >2
                  pm.response.to.not.have.body(null); // Ensure body is not null or empty
            - >
              });
            - >2

            - >
              pm.test("GET request should return status 200", function () {
            - >2
                  pm.response.to.have.status(200); // Status code should be 200 OK
            - >
              });
            - >2

            - >
              pm.test("Response time should be less than 2 seconds", function () {
            - >2
                  pm.expect(pm.response.responseTime).to.be.below(2000); // Verify response time is below 2 seconds
            - >
              });
            - >2

            - >
              pm.test("Response should have the correct data structure", function () {
            - >2
                  pm.response.to.have.jsonBody('data'); // Check if 'data' is present in the response
            - >2
                  pm.response.to.have.jsonBody('data[0].id'); // Ensure id exists in the first item
            - >2
                  pm.response.to.have.jsonBody('data[0].first_name'); // Ensure first name exists
            - >2
                  pm.response.to.have.jsonBody('data[0].last_name'); // Ensure last name exists
            - >2
                  pm.response.to.have.jsonBody('data[0].email'); // Ensure email exists
            - >
              });
            - >2

            - >
              pm.test("Pagination should work correctly", function () {
            - >2
                  pm.response.to.have.jsonBody('page'); // Ensure pagination is present
            - >2
                  pm.response.to.have.jsonBody('per_page'); // Check if per_page is in the response
            - >2
                  pm.response.to.have.jsonBody('total'); // Ensure total number of users is available
            - >
              });
            - >2

            - >
              pm.test("Request should return empty data if no results", function () {
            - >2
                  let data = pm.response.json().data;
            - >2
                  pm.expect(data.length).to.eql(6); // Ensure that data length is 0 (empty data)
            - >
              });
            - >2

            - >2

            - >
              pm.test("Data should be sorted in ascending order", function () {
            - >2
                  let users = pm.response.json().data;
            - >2
                  let isSorted = true;
            - >2

            - >2
                  // Check if users are sorted by id
            - >2
                  for (let i = 0; i < users.length - 1; i++) {
            - >2
                      if (users[i].id > users[i + 1].id) {
            - >2
                          isSorted = false;
            - >2
                          break;
            - >2
                      }
            - >2
                  }
            - >2
                  pm.expect(isSorted).to.eql(true); // Ensure that users are sorted by ID
            - >
              });
            - >2

            - ''
          type: text/javascript
          packages: {}
    request:
      method: GET
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      url:
        raw: https://reqres.in/api/users
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
    response: []
  - name: Single User
    event:
      - listen: test
        script:
          exec:
            - ''
          type: text/javascript
          packages: {}
    protocolProfileBehavior:
      disableBodyPruning: true
    request:
      auth:
        type: noauth
      method: GET
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: ''
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/users/2
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
          - 2
    response: []
  - name: Single User NOT Found
    request:
      auth:
        type: noauth
      method: GET
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      url:
        raw: https://reqres.in/api/users/23
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
          - 23
    response: []
  - name: List <RESOURCE>
    request:
      auth:
        type: noauth
      method: GET
      header: []
      url:
        raw: https://reqres.in/api/unknown
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - unknown
    response: []
  - name: Single <RESOURCE>
    request:
      auth:
        type: noauth
      method: GET
      header: []
      url:
        raw: https://reqres.in/api/unknown/2
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - unknown
          - 2
    response: []
  - name: Create
    event:
      - listen: test
        script:
          exec:
            - >
              pm.test("Status code is 201", function () {
            - >2
                  pm.response.to.have.status(201);
            - >
              });
            - >2

            - >
              pm.test("Response has ID and createdAt", function () {
            - >2
                  const jsonData = pm.response.json();
            - >2
                  pm.expect(jsonData).to.have.property("id");
            - >2
                  pm.expect(jsonData).to.have.property("createdAt");
            - >
              });
            - ''
          type: text/javascript
          packages: {}
    request:
      auth:
        type: noauth
      method: POST
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "name": "morpheus",
              "job": "leader"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/users
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
    response: []
  - name: Update
    event:
      - listen: test
        script:
          exec:
            - >
              pm.test("Status code is 200", function () {
            - >2
                  pm.response.to.have.status(200);
            - >
              });
            - >2

            - >
              pm.test("Updated name and job are returned", function () {
            - >2
                  const jsonData = pm.response.json();
            - >2
                  pm.expect(jsonData.name).to.eql("morpheus");
            - >2
                  pm.expect(jsonData.job).to.eql("zion resident");
            - >
              });
            - ''
          type: text/javascript
          packages: {}
    request:
      auth:
        type: noauth
      method: PUT
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "name": "morpheus",
              "job": "zion resident"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/users/2
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
          - 2
    response: []
  - name: Update
    event:
      - listen: test
        script:
          exec:
            - >
              pm.test("Status code is 200", function () {
            - >2
                  pm.response.to.have.status(200);
            - >
              });
            - >2

            - >
              pm.test("Updated job returned", function () {
            - >2
                  const jsonData = pm.response.json();
            - >2
                  pm.expect(jsonData).to.have.property("job", "zion resident");
            - >
              });
            - ''
          type: text/javascript
          packages: {}
    request:
      auth:
        type: noauth
      method: PATCH
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "name": "morpheus",
              "job": "zion resident"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/users/2
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
          - 2
    response: []
  - name: Delete
    event:
      - listen: test
        script:
          exec:
            - >
              pm.test("Status code is 204", function () {
            - >2
                  pm.response.to.have.status(204);
            - >
              });
            - >2

            - >
              pm.test("Response body is empty", function () {
            - >2
                  pm.expect(pm.response.text()).to.eql("");
            - >
              });
            - ''
          type: text/javascript
          packages: {}
    request:
      auth:
        type: noauth
      method: DELETE
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      url:
        raw: https://reqres.in/api/users/2
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
          - 2
    response: []
  - name: Register - Successful
    request:
      auth:
        type: noauth
      method: POST
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "email": "eve.holt@reqres.in",
              "password": "pistol"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/register
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - register
    response: []
  - name: Register - Unsuccessful
    request:
      auth:
        type: noauth
      method: POST
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "email": "sydney@fife"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/register
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - register
    response: []
  - name: Login - Successful
    request:
      auth:
        type: noauth
      method: POST
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "email": "eve.holt@reqres.in",
              "password": "cityslicka"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/login
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - login
    response: []
  - name: Login - Unsuccessful
    request:
      auth:
        type: noauth
      method: POST
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      body:
        mode: raw
        raw: >-
          {
              "email": "peter@klaven"
          }
        options:
          raw:
            language: json
      url:
        raw: https://reqres.in/api/login
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - login
    response: []
  - name: Delayed Response
    request:
      auth:
        type: noauth
      method: GET
      header:
        - key: x-api-key
          value: reqres-free-v1
          type: text
      url:
        raw: https://reqres.in/api/users?deley=3
        protocol: https
        host:
          - reqres
          - in
        path:
          - api
          - users
        query:
          - key: deley
            value: 3
    response: []
